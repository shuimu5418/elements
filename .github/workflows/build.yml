name: Build
on: [push, pull_request]
env:
  BUILD_TYPE: Release
jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - name: "Windows Latest MSVC"
          os: windows-latest
          cc: "cl"
          cxx: "cl"
          environment_script: "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
        - name: "Ubuntu Latest GCC"
          os: ubuntu-latest
          cc: "gcc-11"
          cxx: "g++-11"
        - name: "macOS Latest Clang"
          os: macos-latest
          cc: "clang"
          cxx: "clang++"
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - name: Cache vcpkg installed libraries
      uses: actions/cache@v2
      with:
        path: |
          !c:/vcpkg/packages
          c:/vcpkg/installed
          c:/vcpkg/vcpkg
        key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/vcpkg.json') }}
        restore-keys: |
          ${{ runner.os }}-vcpkg-
    - name: Install Windows dependencies
      if: runner.os == 'Windows'
      shell: cmd
      run: |
        vcpkg install pkgconf
        vcpkg install cairo
        vcpkg install libwebp
    - name: Install package dependencies
      id: cmake_and_ninja
      shell: cmake -P {0}
      run: |
        if ("${{ runner.os }}" STREQUAL "Windows")
          execute_process(COMMAND choco install ninja)
        elseif ("${{ runner.os }}" STREQUAL "Linux")
          execute_process(COMMAND sudo apt-get update)
          execute_process(COMMAND sudo apt-get install libcairo2-dev)
          execute_process(COMMAND sudo apt-get install libgtk-3-dev)
          execute_process(COMMAND sudo apt-get install libwebp-dev)
          execute_process(COMMAND sudo apt-get install ninja-build)
        elseif ("${{ runner.os }}" STREQUAL "macOS")
          execute_process(COMMAND brew install pkg-config)
          execute_process(COMMAND brew install cairo)
          execute_process(COMMAND brew install fontconfig)
          execute_process(COMMAND brew install bzip2)
          execute_process(COMMAND brew install expat)
          execute_process(COMMAND brew install zlib)
          execute_process(COMMAND brew install libpng)
          execute_process(COMMAND brew install webp)
          execute_process(COMMAND brew install ninja)
        endif()
    - name: Configure
      shell: cmake -P {0}
      run: |
        set(ENV{CC} ${{ matrix.config.cc }})
        set(ENV{CXX} ${{ matrix.config.cxx }})
        # If we are on windows, run the environment script, parse it with cmake
        # and set environment variables with it (required for Visual Studio)
        if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
          execute_process(
            COMMAND "${{ matrix.config.environment_script }}" && set
            OUTPUT_FILE environment_script_output.txt
          )
          file(STRINGS environment_script_output.txt output_lines)
          foreach(line IN LISTS output_lines)
            if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
              set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
            endif()
          endforeach()
        endif()

        if ("${{ runner.os }}" STREQUAL "Windows")
          execute_process(
            COMMAND ${CMAKE_COMMAND}
              -S .
              -B build
              -D CMAKE_BUILD_TYPE=$ENV{BUILD_TYPE}
              -G Ninja
              -D CMAKE_MAKE_PROGRAM=ninja
              -D CMAKE_TOOLCHAIN_FILE=c:/vcpkg/scripts/buildsystems/vcpkg.cmake
            RESULT_VARIABLE result
            ERROR_VARIABLE error_message
          )
        else()
            execute_process(
            COMMAND ${CMAKE_COMMAND}
              -S .
              -B build
              -D CMAKE_BUILD_TYPE=$ENV{BUILD_TYPE}
              -G Ninja
              -D CMAKE_MAKE_PROGRAM=ninja
            RESULT_VARIABLE result
            ERROR_VARIABLE error_message
          )
        endif()

        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Could not run with ${CMAKE_COMMAND}: Got ${error_message} - ${result}")
        endif()
    - name: Build
      shell: cmake -P {0}
      run: |
        # If we are on windows, run the environment script, parse it with cmake
        # and set environment variables with it (required for Visual Studio)
        if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
          execute_process(
            COMMAND "${{ matrix.config.environment_script }}" && set
            OUTPUT_FILE environment_script_output.txt
          )
          file(STRINGS environment_script_output.txt output_lines)
          foreach(line IN LISTS output_lines)
            if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
              set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
            endif()
          endforeach()
        endif()

        execute_process(
          COMMAND ${CMAKE_COMMAND} --build build
          RESULT_VARIABLE result
          ERROR_VARIABLE error_message
        )

        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Could not run with ${CMAKE_COMMAND}: Got ${error_message} - ${result}")
        endif()
    - name: Upload Build Artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.config.name }}-binaries
        path: build/
